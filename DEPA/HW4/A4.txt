MongoDb:

/***********************************************
** DATA ENGINEERING PLATFORMS (MSCA 31012)
** Assignment 4
** Ruoxin Shi
** Date: 11/18/2021
************************************************/

/* Select database */
use sakila

/* 1. List total number of customers living in california ? */
db.customers.find( { District:"California" } ).count()  /* 9 docs */


/* 2. List all movies that are rated NC-17 */
db.films.find( {Rating : "NC-17"} )


/* 3. List the count of movies by category */
db.films.aggregate(
    {
      $group :
        {
          _id : "$Category",
          count: { $sum: 1 }
        }
     }
 )
 
 
/* 4. Find the top 2 movies with movie length greater than 25mins OR which has
commentaries as a special feature */

// First convert the "Length" to integer (originally string)
assert(parseFloat(db.version()) >= 4.2, "The pipeline parameters of the 'update' method need MongoDB Server 4.2 or plus.");

db.getCollection("films").update(
    {
        //_id: 1000, //only update current doc
        "Length" : { $type: "string" }  //update all of type string
    },
    [{
        $set: {
            "Length":
            {
                $convert: {
                    input: "$Length",
                    to: "int", //available convert types: string|bool|int|long|double|decimal|date|timestamp|objectId ...
                    //onError:"$Length", //remain unchanged
                    //onNull: 0, //if the input is null or missing
                }
            },
        }
    }],
    { multi: true }
)

db.films.find(
    { $or: [ { "Length": { $gt: 25 }}, { "Special Features" : /.*Commentaries.*/} ] }
)



/* 5. Find the top 10 customers based on number of rentals */
db.customers.aggregate(
    {
      $project :
        {
          _id : "$_id",
          count: { $size: "$Rentals" }
        }
     }
 ).sort({count:-1}).limit(10)



/* 6. Provide 5 additional queries and indicate the specific business use cases they
address */

/* (a) Find the top 10 customers with most payment amount */
/* Insight: by knowing the 10 customers that spent most in film rentals, we could make them as
            target customers and give more recommendations / rewards to those customers
            in order to attract them to make more rentals. */
db.customers.aggregate([
    {$unwind: '$Rentals'},
    {$unwind: '$Rentals.Payments'},
    {
      $group :
        {
          _id : "$_id",
          amount: { $sum:"$Rentals.Payments.Amount" }
        }
     }
 ])
 
 
 /* (b) Find the average replacement cost for each film category */
 /* Insight: Find the average replacement cost for each category of films to help us
             check whether this would be a factor that affect the rental counts for each
             category. */
 db.films.aggregate([
    {
      $group :
        {
          _id : "$Category",
          cost: { $avg : { $toDouble: "$Replacement Cost" } }
        }
     }
 ])



/* (c) List the top10 country with most customers in descending order */
/* Insight: Find the distribution of customers in the world. This help us
            understand the target customer better and also rearrange our
            emphasis on different regions. */
db.customers.aggregate(
    {
      $group :
        {
          _id : "$Country",
          count: { $sum: 1 }
        }
     }
 ).sort({count:-1})
  .limit(10)



/* (d) List the top10 actors with most films in descending order. */
/* Insight: Find the 10 actors who have most films and compare the result to
            the rental amount of each film to see whether actor is a factor
            that influence the choice of movie rental.*/
db.films.aggregate([
    {$unwind: '$Actors'},
    {
      $group :
        {
          _id : "$_id",
          amount: { $sum: 1 }
        }
     }
 ]).sort({amount:-1})
   .limit(20)
   
   
/* (e) List the top 50 films with most rental counts in descending order. */
/* Insight: Find the 50 films which have been rented most to see the popularity
            for each films. Also, by analyzing the features of these top 50 film
            to find the reasons for their popularity and make new plans that add
            more similar films to the list in order to increase the total rental
            amount. */
db.customers.aggregate([
    {$unwind: '$Rentals'},
    {
      $group :
        {
          _id : "$Rentals.Film Title",
          count: { $sum:1 }
        }
     }
 ]).sort({count:-1}).limit(50)
 
 

Neo4j:

1. Find all Producers that produced the movie When Harry Met Sally
MATCH (harrySally {title: "When Harry Met Sally"})<-[:PRODUCED]-(producers) 
RETURN producers.name


2. Find directors who have directed more than 2 movies
MATCH (p:Person)-[:DIRECTED]->(movie:Movie)
WITH p, collect(movie) as movies, count(*) as cnt
WHERE cnt > 2
RETURN p.name, cnt


3. Find the actors with 5+ movies, and the movies in which they acted
MATCH (actor)-[:ACTED_IN]->(movie:Movie)
WITH actor, collect(movie.title) as movies, count(*) as total
WHERE total > 5
RETURN actor.name, movies, total


4. Movies and actors exactly 3 "hops" away from the movie Hoffa
MATCH (m:Movie {title:"Hoffa"})-[*3]-(p)
RETURN DISTINCT p as movie_actor


5. Find all actors who have also directed movies and the movies that they
directed
MATCH (actor:Person) 
WHERE size((actor)-[:ACTED_IN]->() ) > 0 and size((actor)-[:DIRECTED]->() ) > 0
MATCH (actor)-[:DIRECTED]->(movie:Movie)
RETURN actor.name, collect(movie.title) as movies


6. Provide 5 additional queries and indicate the specific business use cases they
address

(a) Find the number of actors/directors/producers/writers
Insight: Check the number of people in each role to understand the population distribution in the film industry

MATCH (p1:Person)-[:ACTED_IN]->(m1:Movie)
MATCH (p2:Person)-[:DIRECTED]->(m2:Movie)
MATCH (p3:Person)-[:PRODUCED]->(m3:Movie)
MATCH (p4:Person)-[:WROTE]->(m4:Movie)
RETURN COUNT(DISTINCT p1) as Actors, COUNT(DISTINCT p2) as Directors,
        COUNT(DISTINCT p3) as Producers, COUNT(DISTINCT p4) as Writers

(b) Get the reviewers name and their ratings for movies
Insight: 
By getting the ratings for the movies, we could know the popularity of the movie and also understand the movie
performance in a more comprehensive way.

MATCH (p)-[r:REVIEWED]->(m)
RETURN p.name as name, m.title as movie, r.rating as rating, r.summary as summary
ORDER BY r.rating DESC


(c) List the movie count in each year following time order.
Insight: 
Comparing the number of movies in each year to see the overall performance of the movie market that year.

MATCH (m:Movie)
RETURN m.released AS year, COUNT(*) AS total
ORDER BY year

(d) List the actors who acted multiple roles in a single movie with their roles and the movie title.
Insight: 
We could find the corresponding review for the actors and movies on this list to see whether 
actors playing multiple roles in a movie would affect the movie's popularity/quality.

MATCH (p:Person)-[r:ACTED_IN]->(m:Movie)
WHERE size(r.roles) > 1
RETURN p.name AS Name, r.roles AS Roles, m.title AS Title
ORDER BY p.name

(e) Find the top 10 coactors and the number of movies they act in together (order by the count of coacting movies)
Insight:
Find the actors who often cooperate and check whether this collaboration would be a factor the influence the popularity
of a movie (combine the rating, review of the movies they coacted in).

MATCH (p1:Person) -[:ACTED_IN*2]- (p2:Person)
WHERE p1.name <> p2.name
RETURN p1.name AS actor1, p2.name AS actor2, COUNT(*) AS movie_count
ORDER BY movie_count DESC, actor1, actor2
LIMIT 10