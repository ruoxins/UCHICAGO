# RELATIONAL DATABASE : SAKILA

# Q1  List the top 10 customers ( first Name / Last Name ) based on number of rentals and name the top customer
SELECT c.first_name, c.last_name, count(*) as num_of_rentals
FROM customer as c
LEFT JOIN rental as r on r.customer_id = c.customer_id
GROUP BY c.customer_id
ORDER BY num_of_rentals DESC
LIMIT 10;

#        Customer name     number of rentals
# TOP 1: ELEANOR HUNT      46


# Q2. List the most popular categories of movies based on number of rentals
SELECT c.name, count(*) as num_of_rentals
FROM category as c
LEFT JOIN film_category as fc on c.category_id = fc.category_id
LEFT JOIN inventory as i on i.film_id = fc.film_id
LEFT JOIN rental as r on r.inventory_id = i.inventory_id
GROUP BY c.name
ORDER BY num_of_rentals DESC;



#Q3. Find the customer name, customer phone and movie title for rentals that are overdue (assume rentals are allowed for 7 days max)
SELECT c.first_name, c.last_name, a.phone, f.title
FROM customer as c
LEFT JOIN address as a on a.address_id = c.address_id
LEFT JOIN rental as r on r.customer_id = c.customer_id
LEFT JOIN inventory as i on i.inventory_id = r.inventory_id
LEFT JOIN film as f on f.film_id = i.film_id
WHERE DATEDIFF(r.return_date, r.rental_date) > 7;



#Q4. Show a full list of all the actors with their full name in 1 column
SELECT concat(first_name, ' ', last_name) as name
FROM actor;

#Q5. Find movies whose title ends with a
SELECT title
FROM film
WHERE title LIKE '%a';

#Q6. Customers who did not order any movies
SELECT c.first_name, c.last_name, count(*) as num_of_rentals
FROM customer as c
LEFT JOIN rental as r on r.customer_id = c.customer_id
GROUP BY c.customer_id
HAVING num_of_rentals = 0;

#Q7. Distinct count of all movies that are either PG-13 OR PG grouped by rating  
SELECT rating, COUNT(DISTINCT film_id) as count
FROM film as f
WHERE rating = 'PG-13' OR rating = 'PG'
GROUP BY rating;

#Q8. List all customers that live in the Nepal
SELECT c.first_name, c.last_name
FROM customer as c
LEFT JOIN address as a on a.address_id = c.address_id
LEFT JOIN city as ci on ci.city_id = a.city_id
LEFT JOIN country as coun on coun.country_id = ci.country_id
WHERE coun.country = 'Nepal';


#Q9. What is the revenue generated by each employee ?
SELECT s.first_name, s.last_name, SUM(p.amount) as total_revenue
FROM staff as s
LEFT JOIN rental as r on r.staff_id = s.staff_id
LEFT JOIN payment as p on p.rental_id = r.rental_id
GROUP BY s.staff_id;


#Q10. List the inventory available in store to rent, for each of the movies
SELECT s.store_id, f.title, count(i.inventory_id) as count
FROM inventory as i
LEFT JOIN film as f on f.film_id = i.film_id
LEFT JOIN store as s on s.store_id = i.store_id
GROUP BY f.title, s.store_id;





// DOCUMENT DATABASE : RESTAURANT COLLECTION

//1.    Insert a new document with the following specs within the restaurant collection:
//item – DDAI
//Qty - 100, 
//tags – dummy & yellow, 
//size  will have h -  20,  w - 19,  uom – inches 
//Status - Z

use inventory;

db.inventory.insertOne(
   { item: "DDAI", qty: 100, tags: ["dummy", "yellow"], size: { h: 20, w: 19, uom: "inches" }, status: "Z" }
)


//2.    Query Restaurant Collection to filter on status = Z.
db.inventory.find( { status: "Z" } )


//3.    Update the document with status Z to Qty – 200.
db.inventory.updateMany(
   { "status": "Z" },
   {
     $set: { "qty": 200}
   }
)

//4.    Delete all documents with status =Z
db.inventory.deleteMany({ status : "Z" })




# GRAPH DATABASE : MOVIES DB
#1. Find all movies that have multiple directors
MATCH (m:Movie)<-[:DIRECTED]-(p:Person)
with m.title as title, count(p) as cnt
WHERE cnt >= 2
RETURN title, cnt


#2. Find all the actors born in 1970s
MATCH (actor:Person)-[:ACTED_IN]->()
WHERE actor.born >= 1970 and actor.born <= 1979
RETURN actor.name, actor.born


#3. Movies and actors exactly 3 "hops" away from the movie Hoffa
MATCH (m:Movie {title:"Hoffa"})-[*3]-(p)
RETURN DISTINCT p as movie_actor

